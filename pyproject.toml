### pyproject.toml
[tool.poetry]
name = "genie-tooling"
version = "0.1.0"
description = "A hyper-pluggable Python middleware for Agentic AI and LLM applications."
authors = ["Kal Aeolian"]
license = "MIT"
readme = "README.md"
packages = [{include = "genie_tooling", from = "src"}]

[tool.poetry.dependencies]
python = ">=3.11,<4.0"
pydantic = "^2.5"
httpx = "^0.28.1"
sentence-transformers = {version ="^2.7.0", optional = true}
faiss-cpu = {version = "^1.7.4", optional = true}
jsonschema = "^4.19.0"
redis = "^5.0.1"
openai = {version = "^1.10.0", optional = true}
aiofiles = "^23.2.1"
beautifulsoup4 = "^4.12.3"
numpy = "^1.26.4"
docker = {version = "^7.0.0", optional = true}
opentelemetry-api = {version = "^1.25.0", optional = true}
opentelemetry-sdk = {version = "^1.25.0", optional = true}
opentelemetry-exporter-otlp-proto-http = {version = "^1.25.0", optional = true}
opentelemetry-exporter-otlp-proto-grpc = {version = "^1.25.0", optional = true}
celery = {version = "^5.3.6", optional = true}
rq = {version = "^1.15.1", optional = true}
Jinja2 = "^3.1.4"
docstring-parser = "^0.16"
qdrant-client = "^1.7.0"
pyvider-telemetry = {git = "https://github.com/colonelpanik/pyvider-telemetry.git"}
googlesearch-python = "^1.2.4"
rank-bm25 = "^0.2.2"
google-genai = {version = "^1.19.0", optional = true}
trafilatura = {version = "^1.10.0", optional = true}
arxiv = {version = "^2.1.0", optional = true}
llama-cpp-python = {version = "^0.3.9", optional = true}
build = "^1.2.2.post1"
chromadb = {version = "1.0.12", optional = true}
hnswlib = "^0.8.0"
pypdf = "^4.2.0"
sympy = "^1.14.0"

[tool.poetry.group.dev.dependencies]
pytest = "^8.2.2"
pytest-asyncio = "^0.23.8"
mypy = "^1.10.1"
ruff = "^0.4.10"
black = "^24.4.2"
pre-commit = "^3.7.1"
pytest-mock = "^3.14.0"
pytest-cov = "^5.0.0"
mkdocs-print-site-plugin = "^2.7.3"

[tool.poetry.extras]
full = [
    "httpx", "sentence-transformers", "faiss-cpu", "chromadb",
    "jsonschema", "redis", "openai", "aiofiles", "beautifulsoup4", "numpy",
    "google-genai", "docker", "trafilatura", "arxiv",
    "opentelemetry-api", "opentelemetry-sdk",
    "opentelemetry-exporter-otlp-proto-http", "opentelemetry-exporter-otlp-proto-grpc",
    "celery", "rq", "Jinja2", "qdrant-client", "llama-cpp-python", "pyvider-telemetry",
    "googlesearch-python", "rank-bm25", "pypdf", "sympy"
]
web_tools = ["httpx", "beautifulsoup4", "trafilatura", "googlesearch-python", "arxiv", "pypdf"]
openai_services = ["openai"]
local_rag = ["sentence-transformers", "faiss-cpu", "numpy", "aiofiles"]
distributed_rag = ["chromadb", "openai", "qdrant-client"]
ollama = ["httpx"]
secure_exec = ["docker"]
observability = [
    "opentelemetry-api",
    "opentelemetry-sdk",
    "opentelemetry-exporter-otlp-proto-http",
    "opentelemetry-exporter-otlp-proto-grpc"
]
prompts = ["Jinja2"]
task_queues = ["celery", "redis", "rq"]
llama_cpp_server = ["httpx"]
llama_cpp_internal = ["llama-cpp-python"]
pyvider_adapter = ["pyvider-telemetry"]
text_ranking = ["rank-bm25"]
arxiv_tool = ["arxiv", "pypdf"]
symbolic_math = ["sympy"]

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
line-length = 88
select = ["E", "W", "F", "I", "C", "B", "Q", "ASYNC", "NPY", "PYI", "S", "A", "PT", "RUF"]
ignore = ["E501", "B008", "S101", "C901"]
target-version = "py311"

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
check_untyped_defs = true
plugins = "pydantic.mypy"
implicit_reexport = false
strict_equality = true
warn_redundant_casts = true
warn_unused_ignores = true

[[tool.mypy.overrides]]
module = [
    "faiss.*", "sentence_transformers.*", "chromadb.*", "chromadb.config.*",
    "redis.*", "redis.asyncio.*", "redis.exceptions.*", "bs4.*",
    "google.generativeai.*", "google.ai.generativelanguage.*", "trafilatura.*",
    "docker.*",
    "opentelemetry.*", "opentelemetry.exporter.*",
    "jinja2.*",
    "celery.*",
    "rq.*",
    "qdrant_client.*",
    "llama_cpp.*",
    "pyvider.telemetry.*",
    "googlesearch.*",
    "rank_bm25.*",
    "arxiv.*",
    "pypdf.*",
    "sympy.*"
]
ignore_missing_imports = true

[tool.black]
line-length = 88

[tool.pytest.ini_options]
testpaths = ["tests"]
filterwarnings = [
    "ignore::DeprecationWarning"
]
markers = [
    "slow: marks tests as slow to run",
    "integration: marks integration tests",
    "needs_api_key: marks tests requiring live API keys (skip by default)",
]

[tool.poetry.plugins."genie_tooling.plugins"]
# Core Key Providers
"environment_key_provider_v1" = "genie_tooling.security.impl.environment_key_provider:EnvironmentKeyProvider"

# Core LLM Providers
"ollama_llm_provider_v1" = "genie_tooling.llm_providers.impl.ollama_provider:OllamaLLMProviderPlugin"
"gemini_llm_provider_v1" = "genie_tooling.llm_providers.impl.gemini_provider:GeminiLLMProviderPlugin"
"openai_llm_provider_v1" = "genie_tooling.llm_providers.impl.openai_provider:OpenAILLMProviderPlugin"
"llama_cpp_llm_provider_v1" = "genie_tooling.llm_providers.impl.llama_cpp_provider:LlamaCppLLMProviderPlugin"
"llama_cpp_internal_llm_provider_v1" = "genie_tooling.llm_providers.impl.llama_cpp_internal_provider:LlamaCppInternalLLMProviderPlugin"

# Core Command Processors
"simple_keyword_processor_v1" = "genie_tooling.command_processors.impl.simple_keyword_processor:SimpleKeywordToolSelectorProcessorPlugin"
"llm_assisted_tool_selection_processor_v1" = "genie_tooling.command_processors.impl.llm_assisted_processor:LLMAssistedToolSelectionProcessorPlugin"
"rewoo_command_processor_v1" = "genie_tooling.command_processors.impl.rewoo_processor:ReWOOCommandProcessorPlugin"
"deep_research_agent_v1" = "genie_tooling.command_processors.impl.deep_research_processor:DeepResearchProcessorPlugin"

# Core Tools
"calculator_tool" = "genie_tooling.tools.impl.calculator:CalculatorTool"
"open_weather_map_tool" = "genie_tooling.tools.impl.openweather:OpenWeatherMapTool"
"generic_code_execution_tool" = "genie_tooling.tools.impl.code_execution_tool:GenericCodeExecutionTool"
"google_search_tool_v1" = "genie_tooling.tools.impl.google_search:GoogleSearchTool"
"sandboxed_fs_tool_v1" = "genie_tooling.tools.impl.sandboxed_fs_tool:SandboxedFileSystemTool"
"intelligent_search_aggregator_v1" = "genie_tooling.tools.impl.intelligent_search_aggregator_tool:IntelligentSearchAggregatorTool"
"arxiv_search_tool" = "genie_tooling.tools.impl.arxiv_search_tool:ArxivSearchTool"
"discussion_sentiment_summarizer" = "genie_tooling.tools.impl.discussion_sentiment_summarizer:DiscussionSentimentSummarizerTool"
"pdf_text_extractor_tool_v1" = "genie_tooling.tools.impl.pdf_text_extractor_tool:PDFTextExtractorTool"
"content_retriever_tool_v1" = "genie_tooling.tools.impl.content_retriever_tool:ContentRetrieverTool"
"web_page_scraper_tool_v1" = "genie_tooling.tools.impl.web_page_scraper_tool:WebPageScraperTool"
"symbolic_math_tool" = "genie_tooling.tools.impl.symbolic_math_tool:SymbolicMathTool"

# Core Definition Formatters
"human_readable_json_formatter_plugin_v1" = "genie_tooling.definition_formatters.impl.human_readable_json:HumanReadableJSONFormatter"
"openai_function_formatter_plugin_v1" = "genie_tooling.definition_formatters.impl.openai_function:OpenAIFunctionFormatter"
"compact_text_formatter_plugin_v1" = "genie_tooling.definition_formatters.impl.compact_text:CompactTextFormatter"

# Core RAG Components
"file_system_loader_v1" = "genie_tooling.document_loaders.impl.file_system:FileSystemLoader"
"web_page_loader_v1" = "genie_tooling.document_loaders.impl.web_page:WebPageLoader"
"character_recursive_text_splitter_v1" = "genie_tooling.text_splitters.impl.character_recursive:CharacterRecursiveTextSplitter"
"sentence_transformer_embedder_v1" = "genie_tooling.embedding_generators.impl.sentence_transformer:SentenceTransformerEmbedder"
"openai_embedding_generator_v1" = "genie_tooling.embedding_generators.impl.openai_embed:OpenAIEmbeddingGenerator"
"faiss_vector_store_v1" = "genie_tooling.vector_stores.impl.faiss_store:FAISSVectorStore"
"chromadb_vector_store_v1" = "genie_tooling.vector_stores.impl.chromadb_store:ChromaDBVectorStore"
"qdrant_vector_store_v1" = "genie_tooling.vector_stores.impl.qdrant_store:QdrantVectorStorePlugin"
"basic_similarity_retriever_v1" = "genie_tooling.retrievers.impl.basic_similarity:BasicSimilarityRetriever"

# Core Tool Lookup Providers
"embedding_similarity_lookup_v1" = "genie_tooling.tool_lookup_providers.impl.embedding_similarity:EmbeddingSimilarityLookupProvider"
"keyword_match_lookup_v1" = "genie_tooling.tool_lookup_providers.impl.keyword_match:KeywordMatchLookupProvider"
"hybrid_search_lookup_v1" = "genie_tooling.tool_lookup_providers.impl.hybrid_search:HybridSearchLookupProvider"

# Core Invocation Strategy Components
"default_async_invocation_strategy_v1" = "genie_tooling.invocation_strategies.impl.default_async:DefaultAsyncInvocationStrategy"
"distributed_task_invocation_strategy_v1" = "genie_tooling.invocation_strategies.impl.distributed_task_strategy:DistributedTaskInvocationStrategy"
"jsonschema_input_validator_v1" = "genie_tooling.input_validators.impl.jsonschema_validator:JSONSchemaInputValidator"
"passthrough_output_transformer_v1" = "genie_tooling.output_transformers.impl.passthrough_transformer:PassThroughOutputTransformer"
"default_error_handler_v1" = "genie_tooling.error_handlers.impl.default_handler:DefaultErrorHandler"
"llm_error_formatter_v1" = "genie_tooling.error_formatters.impl.llm_formatter:LLMErrorFormatter"
"json_error_formatter_v1" = "genie_tooling.error_formatters.impl.json_formatter:JSONErrorFormatter"

# Core Caching Providers
"in_memory_cache_provider_v1" = "genie_tooling.cache_providers.impl.in_memory:InMemoryCacheProvider"
"redis_cache_provider_v1" = "genie_tooling.cache_providers.impl.redis_cache:RedisCacheProvider"

# Core Logging/Redaction
"default_log_adapter_v1" = "genie_tooling.log_adapters.impl.default_adapter:DefaultLogAdapter"
"pyvider_telemetry_log_adapter_v1" = "genie_tooling.log_adapters.impl.pyvider_telemetry_adapter:PyviderTelemetryLogAdapter"
"noop_redactor_v1" = "genie_tooling.redactors.impl.noop_redactor:NoOpRedactorPlugin"
"schema_aware_redactor_v1" = "genie_tooling.redactors.impl.schema_aware:SchemaAwareRedactor"

# Core Executors
"secure_docker_executor_v1" = "genie_tooling.code_executors.impl.secure_docker_executor:SecureDockerExecutor"
"pysandbox_executor_stub_v1" = "genie_tooling.code_executors.impl.pysandbox_executor_stub:PySandboxExecutorStub"

# Observability, HITL, Token Usage, Guardrails
"console_tracer_plugin_v1" = "genie_tooling.observability.impl.console_tracer:ConsoleTracerPlugin"
"otel_tracer_plugin_v1" = "genie_tooling.observability.impl.otel_tracer:OpenTelemetryTracerPlugin"
"cli_approval_plugin_v1" = "genie_tooling.hitl.impl.cli_approval:CliApprovalPlugin"
"in_memory_token_usage_recorder_v1" = "genie_tooling.token_usage.impl.in_memory_recorder:InMemoryTokenUsageRecorderPlugin"
"otel_metrics_token_recorder_v1" = "genie_tooling.token_usage.impl.otel_metrics_recorder:OpenTelemetryMetricsTokenRecorderPlugin"
"keyword_blocklist_guardrail_v1" = "genie_tooling.guardrails.impl.keyword_blocklist:KeywordBlocklistGuardrailPlugin"

# Prompts, Conversation, LLM Output Parsers
"file_system_prompt_registry_v1" = "genie_tooling.prompts.impl.file_system_prompt_registry:FileSystemPromptRegistryPlugin"
"basic_string_format_template_v1" = "genie_tooling.prompts.impl.basic_string_format_template:BasicStringFormatTemplatePlugin"
"jinja2_chat_template_v1" = "genie_tooling.prompts.impl.jinja2_chat_template:Jinja2ChatTemplatePlugin"
"in_memory_conversation_state_v1" = "genie_tooling.conversation.impl.in_memory_state_provider:InMemoryStateProviderPlugin"
"redis_conversation_state_v1" = "genie_tooling.conversation.impl.redis_state_provider:RedisStateProviderPlugin"
"json_output_parser_v1" = "genie_tooling.prompts.llm_output_parsers.impl.json_output_parser:JSONOutputParserPlugin"
"pydantic_output_parser_v1" = "genie_tooling.prompts.llm_output_parsers.impl.pydantic_output_parser:PydanticOutputParserPlugin"

# Distributed Task Queues
"celery_task_queue_v1" = "genie_tooling.task_queues.impl.celery_queue:CeleryTaskQueuePlugin"
"redis_queue_task_plugin_v1" = "genie_tooling.task_queues.impl.rq_queue:RedisQueueTaskPlugin"